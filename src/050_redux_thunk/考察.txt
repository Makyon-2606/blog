
"store/index"

【概要】

◆各状態の管理を指揮するreducer関数が集約させる


【実装】

◆store/couterをimportし、counterReducerと命名

◆export defaultにconfigureStoreを定義

◆reduceプロパティに、'counterReducer'を定義


【役割】

◆各状態の管理を指揮するreducer関数が集約する



"store/modules/counter"

【概要】

◆counterの状態管理を行うために必要なデータのexportや処理を記載


【実装】

◆cresteSliceを定義し、Redux Sliceを生成
　　　name：'counter'
　　　reduces：'add', 'minus'　引数に(state, {type, payload})
　　　initialStore：'{count: 0}'
　　　
◆createSliceから生成されたactionsの関数をexport
　　　dispatchを使用する箇所で使用
　　　
◆createSliceから生成されたreducer関数をdefault export
　　　store/indexのconfigureStoreのreducerプロパティで使用
　　　
　　　
【役割】

◆状態を更新するために必要なデータが生成され、
　各コンポーネントで必要な機能をexportする



"Example"

【概要】

◆各コンポーネントでstoreが使用できるようにProviderやstoreを設定する


【実装】

◆store/indexをimport

◆Counterを子コンポーネントとして、Providerで囲む

◆Providerのstoreプロパティに、importした「store」を指定
　
　
【役割】

◆各コンポーネントでstoreが使用できるようになる



"Counter"

【概要】

◆Counterの表示に必要な各コンポーネントを定義する


【実装】

◆CounterResultとCounterButtonをimport

◆CounterResultコンポーネントを定義

◆CounterButtonコンポーネントを定義し、必要なpropsを定義
　　　　calcType：どのaction関数を実行するのか識別
　　　　step：ボタン押下時にstateを更新する数値

【役割】

◆子コンポーネントをまとめ、必要なデータをpropsとして渡す


"CounterButton"

【概要】

◆ボタン押下時の挙動を記載する


【実装】

◆store/counterからexportされたactionCreator関数の
　add()とminus()をimport

◆dispatchを使用するのでuseDispatchをimport

◆propsで渡ってきたcalcTypeとstepを受け取る

◆ボタンをJSXで作成し、onClickイベントを作成

◆counterAction関数を作成

　◆calcTypeに応じて、add(step)とminus(step)どちらか実行
　　これにより、別々のactionオブジェクトを生成

　◆actionオブジェクトが生成されたのでdispatchの引数に渡す



【役割】

◆ボタン押下によってdispatchさせて特定のreducerを呼び出す



"CounterResult"

【目的】

◆useSelectorを使用してCounterの状態を表示する


【実装】

◆状態を表示するために、useSelectorを定義

◆useSelectorの引数のコールバック関数でstateを受け取る

◆configureStoreのreducerに格納されているデータがあるはず

◆必要なデータを取り出す


【役割】

◆Counterの状態を表示する



