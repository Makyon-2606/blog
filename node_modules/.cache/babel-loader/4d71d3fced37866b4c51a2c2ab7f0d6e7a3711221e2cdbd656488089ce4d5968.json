{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sjamp\\\\Documents\\\\\\u5B66\\u7FD2\\\\react-guide-material\\\\13_redux\\\\start\\\\src\\\\070_blog\\\\Mypage.js\",\n  _s = $RefreshSig$();\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { ENDPOINT_BLOG, FETCH_BLOG_DATA_FAILURE } from './consts/const';\nimport { addBlogPosts as addPostsActions, allClear as allClearActions } from './store/modules/userState';\nimport BlogList from './components/BlogList';\nimport { persistor } from './store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Mypage = () => {\n  _s();\n  const navigate = useNavigate();\n\n  // ログインせずにマイページ画面への遷移を防止\n  useEffect(() => {\n    if (!userState) {\n      navigate('/');\n    }\n  }, []);\n  const userState = useSelector(state => state.user.userState);\n  const blogPosts = useSelector(state => state.user.blogPosts);\n  const dispatch = useDispatch();\n\n  // userStateのIDをエンコードしてローカルストレージに格納（※今回は仮トークン扱い）\n  if (userState.length !== 0) {\n    const encodedUserId = btoa(userState.id);\n    localStorage.setItem('userToken', encodedUserId);\n  }\n\n  // ローカルストレージから取得（※今回は仮トークン扱い）\n  // const storedToken = localStorage.getItem('userToken');\n  // const decodedUserId = atob(storedToken);\n\n  // ユーザのブログデータを取得\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await axios.get(`${ENDPOINT_BLOG}?keyId=${userState.id}`);\n        const posts = res.data[0].posts;\n        dispatch(addPostsActions(posts));\n      } catch (e) {\n        console.error(FETCH_BLOG_DATA_FAILURE, e);\n        navigate('/');\n      }\n    })();\n  }, []);\n\n  // ローカルストレージのデータを消去して、トップ画面に遷移する\n  const logout = () => {\n    dispatch(logoutAction());\n    persistor.purge();\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [userState.name, \"\\u3055\\u3093\\u306E\\u30DA\\u30FC\\u30B8\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"newPost\",\n      className: \"button new-post-button\",\n      children: \"\\u65B0\\u898F\\u6295\\u7A3F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"changepass\",\n      className: \"button change-pass-button\",\n      children: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u5909\\u66F4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), blogPosts.length ? blogPosts.map(post => /*#__PURE__*/_jsxDEV(BlogList, {\n      post: post\n    }, post.postDate, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 33\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-poslts-message\",\n      children: \"\\u6295\\u7A3F\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logout,\n      className: \"button logout-button\",\n      children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Mypage, \"2Os7zQLTH7uOtgV3UwudOzZlTX4=\", false, function () {\n  return [useNavigate, useSelector, useSelector, useDispatch];\n});\n_c = Mypage;\nexport default Mypage;\nvar _c;\n$RefreshReg$(_c, \"Mypage\");","map":{"version":3,"names":["Link","useNavigate","useDispatch","useSelector","useEffect","axios","ENDPOINT_BLOG","FETCH_BLOG_DATA_FAILURE","addBlogPosts","addPostsActions","allClear","allClearActions","BlogList","persistor","jsxDEV","_jsxDEV","Fragment","_Fragment","Mypage","_s","navigate","userState","state","user","blogPosts","dispatch","length","encodedUserId","btoa","id","localStorage","setItem","res","get","posts","data","e","console","error","logout","logoutAction","purge","children","name","fileName","_jsxFileName","lineNumber","columnNumber","to","className","map","post","postDate","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/Mypage.js"],"sourcesContent":["import { Link, useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ENDPOINT_BLOG, FETCH_BLOG_DATA_FAILURE } from './consts/const';\r\nimport {\r\n  addBlogPosts as addPostsActions,\r\n  allClear as allClearActions,\r\n} from './store/modules/userState';\r\nimport BlogList from './components/BlogList';\r\nimport { persistor } from './store';\r\n\r\nconst Mypage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // ログインせずにマイページ画面への遷移を防止\r\n  useEffect(() => {\r\n    if (!userState) {\r\n      navigate('/');\r\n    }\r\n  }, []);\r\n\r\n  const userState = useSelector((state) => state.user.userState);\r\n  const blogPosts = useSelector((state) => state.user.blogPosts);\r\n  const dispatch = useDispatch();\r\n\r\n  // userStateのIDをエンコードしてローカルストレージに格納（※今回は仮トークン扱い）\r\n  if (userState.length !== 0) {\r\n    const encodedUserId = btoa(userState.id);\r\n    localStorage.setItem('userToken', encodedUserId);\r\n  }\r\n\r\n  // ローカルストレージから取得（※今回は仮トークン扱い）\r\n  // const storedToken = localStorage.getItem('userToken');\r\n  // const decodedUserId = atob(storedToken);\r\n\r\n  // ユーザのブログデータを取得\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const res = await axios.get(`${ENDPOINT_BLOG}?keyId=${userState.id}`);\r\n        const posts = res.data[0].posts;\r\n        dispatch(addPostsActions(posts));\r\n      } catch (e) {\r\n        console.error(FETCH_BLOG_DATA_FAILURE, e);\r\n        navigate('/');\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  // ローカルストレージのデータを消去して、トップ画面に遷移する\r\n  const logout = () => {\r\n    dispatch(logoutAction());\r\n    persistor.purge();\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>{userState.name}さんのページ</h1>\r\n      <Link to='newPost' className='button new-post-button'>\r\n        新規投稿\r\n      </Link>\r\n      <Link to='changepass' className='button change-pass-button'>\r\n        パスワード変更\r\n      </Link>\r\n      {blogPosts.length ? (\r\n        blogPosts.map((post) => <BlogList post={post} key={post.postDate} />)\r\n      ) : (\r\n        <div className='no-poslts-message'>投稿がありません</div>\r\n      )}\r\n      <button onClick={logout} className='button logout-button'>\r\n        ログアウト\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Mypage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}