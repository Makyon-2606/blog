{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sjamp\\\\Documents\\\\\\u5B66\\u7FD2\\\\react-guide-material\\\\13_redux\\\\start\\\\src\\\\070_blog\\\\components\\\\PassValidate.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport { UPPERCASE_REGEX, LOWERCASE_REGEX, DIGIT_REGEX, SPECIAL_CHAR_REGEX, PASSWORD_CRITERIA_ERROR_MESSAGE } from '../consts/const';\nimport ErrorMessage from './ErrorMessage';\n\n/**\r\n * パスワードバリデーションのコンポーネント\r\n *\r\n * @param {string, function} passState（パスワード入力値／更新関数）\r\n * @param {boolean} passErrorFlag （パスワードのエラーフラグ）\r\n * @param {string} placeholder\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PassValidate = ({\n  passState,\n  passErrorFlag,\n  placeholder\n}) => {\n  _s();\n  const [pass, setPass] = passState; // パスワード入力値の状態管理（props）\n  const [errorFlag, setErrorFlag] = passErrorFlag; // パスワード入力値のエラーフラグ（props）\n  const [isFirstInputPass, setIsFirstInputPass] = useState(false); // パスワードの初期入力フラグ\n\n  // 入力条件の各エラーフラグ\n  const [validation, setValidation] = useState({\n    isLengthValid: false,\n    //10文字以上\n    hasUppercase: false,\n    //大文字\n    hasLowercase: false,\n    //小文字\n    hasDegit: false,\n    //数字\n    hasSpecialChar: false //記号\n  });\n\n  /**\r\n   * パスワード入力値のバリデーションチェックする関数\r\n   *\r\n   * @param {string} pass（パスワードの入力値）\r\n   *\r\n   * @ newInputValidation: パスワードの各入力条件のチェック結果をまとめたオブジェクト\r\n   * @ setValidation: 入力条件の各エラーフラグにチェック結果をまとめたオブジェクトを更新\r\n   * @ passwordFullyValidate:  パスワードの入力条件が通っているか確認し、エラーフラグを切り替える関数\r\n   */\n  const validatePassword = useCallback(() => {\n    const newInputValidation = {\n      isLengthValid: String(pass).length >= 10,\n      hasUppercase: UPPERCASE_REGEX.test(pass),\n      hasLowercase: pass ? LOWERCASE_REGEX.test(pass) : false,\n      hasDegit: DIGIT_REGEX.test(pass),\n      hasSpecialChar: SPECIAL_CHAR_REGEX.test(pass)\n    };\n    setValidation(newInputValidation);\n    passwordFullyValidate(newInputValidation);\n  }, [pass]);\n\n  /**\r\n   * パスワードの入力条件が通っているか確認し、エラーフラグを切り替える関数\r\n   *\r\n   * @param {Object} newValidation（パスワードの各入力条件のチェック結果をまとめたオブジェクト）\r\n   *\r\n   * @ isPasswordFullyValidated: パスワードの各入力条件のチェック結果がすべてtrueであるかの真偽値\r\n   * @ すべて満たしていたらエラーフラグをfalse、そうでなかったらtrueに更新\r\n   */\n  const passwordFullyValidate = newValidation => {\n    const isPasswordFullyValidated = Object.values(newValidation).every(Boolean);\n    setErrorFlag(!isPasswordFullyValidated);\n  };\n\n  // パスワード入力値が更新されたとき、バリデーションチェック関数を呼び出す\n  useEffect(() => {\n    validatePassword();\n  }, [pass]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: placeholder,\n      value: pass,\n      onChange: e => {\n        setPass(e.target.value);\n      },\n      onBlur: () => setIsFirstInputPass(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), isFirstInputPass && errorFlag && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: PASSWORD_CRITERIA_ERROR_MESSAGE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: `lengthValid-${validation.isLengthValid}`,\n        children: \"10\\u6587\\u5B57\\u4EE5\\u4E0A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `uppercase-${validation.hasUppercase}`,\n        children: \"\\u534A\\u89D2\\u5927\\u6587\\u5B57\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `lowercase-${validation.hasLowercase}`,\n        children: \"\\u534A\\u89D2\\u5C0F\\u6587\\u5B57\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `degit-${validation.hasDegit}`,\n        children: \"\\u534A\\u89D2\\u6570\\u5024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `special-char-${validation.hasSpecialChar}`,\n        children: \"\\u534A\\u89D2\\u8A18\\u53F7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(PassValidate, \"vmJEYnTO1dM587dZRu/a+kw7Vl4=\");\n_c = PassValidate;\nexport default PassValidate;\nvar _c;\n$RefreshReg$(_c, \"PassValidate\");","map":{"version":3,"names":["useCallback","useEffect","useState","UPPERCASE_REGEX","LOWERCASE_REGEX","DIGIT_REGEX","SPECIAL_CHAR_REGEX","PASSWORD_CRITERIA_ERROR_MESSAGE","ErrorMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","PassValidate","passState","passErrorFlag","placeholder","_s","pass","setPass","errorFlag","setErrorFlag","isFirstInputPass","setIsFirstInputPass","validation","setValidation","isLengthValid","hasUppercase","hasLowercase","hasDegit","hasSpecialChar","validatePassword","newInputValidation","String","length","test","passwordFullyValidate","newValidation","isPasswordFullyValidated","Object","values","every","Boolean","children","type","value","onChange","e","target","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","message","className","_c","$RefreshReg$"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/components/PassValidate.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\r\nimport {\r\n  UPPERCASE_REGEX,\r\n  LOWERCASE_REGEX,\r\n  DIGIT_REGEX,\r\n  SPECIAL_CHAR_REGEX,\r\n  PASSWORD_CRITERIA_ERROR_MESSAGE,\r\n} from '../consts/const';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\n/**\r\n * パスワードバリデーションのコンポーネント\r\n *\r\n * @param {string, function} passState（パスワード入力値／更新関数）\r\n * @param {boolean} passErrorFlag （パスワードのエラーフラグ）\r\n * @param {string} placeholder\r\n */\r\nconst PassValidate = ({ passState, passErrorFlag, placeholder }) => {\r\n  const [pass, setPass] = passState; // パスワード入力値の状態管理（props）\r\n  const [errorFlag, setErrorFlag] = passErrorFlag; // パスワード入力値のエラーフラグ（props）\r\n  const [isFirstInputPass, setIsFirstInputPass] = useState(false); // パスワードの初期入力フラグ\r\n\r\n  // 入力条件の各エラーフラグ\r\n  const [validation, setValidation] = useState({\r\n    isLengthValid: false, //10文字以上\r\n    hasUppercase: false, //大文字\r\n    hasLowercase: false, //小文字\r\n    hasDegit: false, //数字\r\n    hasSpecialChar: false, //記号\r\n  });\r\n\r\n  /**\r\n   * パスワード入力値のバリデーションチェックする関数\r\n   *\r\n   * @param {string} pass（パスワードの入力値）\r\n   *\r\n   * @ newInputValidation: パスワードの各入力条件のチェック結果をまとめたオブジェクト\r\n   * @ setValidation: 入力条件の各エラーフラグにチェック結果をまとめたオブジェクトを更新\r\n   * @ passwordFullyValidate:  パスワードの入力条件が通っているか確認し、エラーフラグを切り替える関数\r\n   */\r\n  const validatePassword = useCallback(() => {\r\n    const newInputValidation = {\r\n      isLengthValid: String(pass).length >= 10,\r\n      hasUppercase: UPPERCASE_REGEX.test(pass),\r\n      hasLowercase: pass ? LOWERCASE_REGEX.test(pass) : false,\r\n      hasDegit: DIGIT_REGEX.test(pass),\r\n      hasSpecialChar: SPECIAL_CHAR_REGEX.test(pass),\r\n    };\r\n    setValidation(newInputValidation);\r\n    passwordFullyValidate(newInputValidation);\r\n  }, [pass]);\r\n\r\n  /**\r\n   * パスワードの入力条件が通っているか確認し、エラーフラグを切り替える関数\r\n   *\r\n   * @param {Object} newValidation（パスワードの各入力条件のチェック結果をまとめたオブジェクト）\r\n   *\r\n   * @ isPasswordFullyValidated: パスワードの各入力条件のチェック結果がすべてtrueであるかの真偽値\r\n   * @ すべて満たしていたらエラーフラグをfalse、そうでなかったらtrueに更新\r\n   */\r\n  const passwordFullyValidate = (newValidation) => {\r\n    const isPasswordFullyValidated =\r\n      Object.values(newValidation).every(Boolean);\r\n    setErrorFlag(!isPasswordFullyValidated);\r\n  };\r\n\r\n  // パスワード入力値が更新されたとき、バリデーションチェック関数を呼び出す\r\n  useEffect(() => {\r\n    validatePassword();\r\n  }, [pass]);\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='password'\r\n        placeholder={placeholder}\r\n        value={pass}\r\n        onChange={(e) => {\r\n          setPass(e.target.value);\r\n        }}\r\n        onBlur={() => setIsFirstInputPass(true)}\r\n      />\r\n      {isFirstInputPass && errorFlag && (\r\n        <ErrorMessage message={PASSWORD_CRITERIA_ERROR_MESSAGE} />\r\n      )}\r\n      <ul className='list-container'>\r\n        <li className={`lengthValid-${validation.isLengthValid}`}>\r\n          10文字以上\r\n        </li>\r\n        <li className={`uppercase-${validation.hasUppercase}`}>半角大文字</li>\r\n        <li className={`lowercase-${validation.hasLowercase}`}>半角小文字</li>\r\n        <li className={`degit-${validation.hasDegit}`}>半角数値</li>\r\n        <li className={`special-char-${validation.hasSpecialChar}`}>\r\n          半角記号\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PassValidate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}