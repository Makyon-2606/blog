{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sjamp\\\\Documents\\\\\\u5B66\\u7FD2\\\\react-guide-material\\\\13_redux\\\\start\\\\src\\\\070_blog\\\\NewPost.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { ENDPOINT_BLOG } from './consts/const';\nimport { addAuthUserBlog as addPostsActions } from './store/modules/userState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewPost = () => {\n  _s();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const userState = useSelector(state => state.user.userState);\n  const authUserBlog = useSelector(state => state.user.authUserBlog);\n  const [title, setTitle] = useState(''); // タイトルの入力値の状態管理\n  const [titleErrorFlag, setTitleErrorFlag] = useState(false); // タイトルのエラーフラグ\n\n  const [content, setContent] = useState(''); // 文章の入力値の状態管理\n  const [contentErrorFlag, setContentErrorFlag] = useState(false); // 文章のエラーフラグ\n\n  const [disabledFlag, setDisabledFlag] = useState(true); // 投稿ボタンの活性フラグ\n\n  useEffect(() => {\n    // タイトルの文字数が30を超えている場合は、エラーフラグを立てる\n    const titleTooLong = title.length > 30;\n    setTitleErrorFlag(titleTooLong);\n\n    // 内容の文字数が500を超えている場合は、エラーフラグを立てる\n    const contentTooLong = content.length > 500;\n    setContentErrorFlag(contentTooLong);\n\n    // タイトルか文章のエラーフラグが立っている、または、タイトルまたは文章が空の場合は、投稿ボタンを無効にする\n    const isDisabled = titleTooLong || contentTooLong || !title || !content;\n    setDisabledFlag(isDisabled);\n  }, [title, content]);\n\n  // ブログを投稿する関数\n  const postSubmit = async e => {\n    e.preventDefault(); // フォームのデフォルト送信を防止\n\n    // 新規投稿データ\n    const newPost = {\n      postDate: new Date().toISOString(),\n      title,\n      content\n    };\n    try {\n      // postsプロパティに追加するデータを新規作成（既存postsデータ＋新規投稿データ）\n      const updatedPosts = [...authUserBlog, newPost];\n      console.log(updatedPosts);\n\n      // postsプロパティに新規データを追加\n      await axios.put(`${ENDPOINT_BLOG}/${userState.id}`, {\n        posts: updatedPosts\n      });\n      dispatch(addPostsActions(updatedPosts));\n    } catch (e) {\n      console.error('Error adding new post:', e);\n    }\n\n    // try {\n    //   // まず、ユーザのブログの既存データを取得\n    //   const res = await axios.get(`${ENDPOINT_BLOG}?id=${userState.id}`);\n    //   const blogData = res.data[0];\n\n    //   console.log(authUserBlog); // posts全体のデータ（配列）\n    //   console.log(blogData); // 合致するidが含まれているpostsオブジェクト\n\n    //   // posts配列に新しいポストを追加\n    //   const updatedPosts = [...blogData.posts, newPost];\n\n    //   // オブジェクト全体を更新する\n    //   await axios.put(`${ENDPOINT_BLOG}/${userState.id}`, {\n    //     ...blogData,\n    //     posts: updatedPosts,\n    //   });\n\n    //   // const res = await axios.post(\n    //   //   `${ENDPOINT_BLOG}/keyId=${userState.id}/posts`,\n    //   //   newPost\n    //   // );\n    // } catch (e) {\n    //   console.error('Error adding new post:', e);\n    // }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: postSubmit,\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-post-title-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `new-post-title-textbox new-post-title-textbox-${titleErrorFlag}`,\n          value: title,\n          onChange: e => setTitle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `new-post-title-length new-post-title-length-${titleErrorFlag}`,\n          children: `${title.length}文字 / 30文字`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-post-content-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: `new-post-content-textbox new-post-content-textbox-${contentErrorFlag}`,\n          value: content,\n          onChange: e => setContent(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `new-post-content-length new-post-content-length-${contentErrorFlag}`,\n          children: `${content.length}文字 / 500文字`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `submit-button submit-button-disabled-${disabledFlag} new-post-submit-button`,\n        disabled: disabledFlag,\n        children: \"\\u6295\\u7A3F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(NewPost, \"/Q4XFLkEH/qXwQ6yAOjFn12HNdM=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector];\n});\n_c = NewPost;\nexport default NewPost;\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["axios","useEffect","useState","useSelector","useDispatch","useNavigate","ENDPOINT_BLOG","addAuthUserBlog","addPostsActions","jsxDEV","_jsxDEV","Fragment","_Fragment","NewPost","_s","navigate","dispatch","userState","state","user","authUserBlog","title","setTitle","titleErrorFlag","setTitleErrorFlag","content","setContent","contentErrorFlag","setContentErrorFlag","disabledFlag","setDisabledFlag","titleTooLong","length","contentTooLong","isDisabled","postSubmit","e","preventDefault","newPost","postDate","Date","toISOString","updatedPosts","console","log","put","id","posts","error","children","onSubmit","className","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","_c","$RefreshReg$"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/NewPost.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ENDPOINT_BLOG } from './consts/const';\r\nimport { addAuthUserBlog as addPostsActions } from './store/modules/userState';\r\n\r\nconst NewPost = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const userState = useSelector((state) => state.user.userState);\r\n  const authUserBlog = useSelector((state) => state.user.authUserBlog);\r\n  const [title, setTitle] = useState(''); // タイトルの入力値の状態管理\r\n  const [titleErrorFlag, setTitleErrorFlag] = useState(false); // タイトルのエラーフラグ\r\n\r\n  const [content, setContent] = useState(''); // 文章の入力値の状態管理\r\n  const [contentErrorFlag, setContentErrorFlag] = useState(false); // 文章のエラーフラグ\r\n\r\n  const [disabledFlag, setDisabledFlag] = useState(true); // 投稿ボタンの活性フラグ\r\n\r\n  useEffect(() => {\r\n    // タイトルの文字数が30を超えている場合は、エラーフラグを立てる\r\n    const titleTooLong = title.length > 30;\r\n    setTitleErrorFlag(titleTooLong);\r\n\r\n    // 内容の文字数が500を超えている場合は、エラーフラグを立てる\r\n    const contentTooLong = content.length > 500;\r\n    setContentErrorFlag(contentTooLong);\r\n\r\n    // タイトルか文章のエラーフラグが立っている、または、タイトルまたは文章が空の場合は、投稿ボタンを無効にする\r\n    const isDisabled = titleTooLong || contentTooLong || !title || !content;\r\n    setDisabledFlag(isDisabled);\r\n  }, [title, content]);\r\n\r\n  // ブログを投稿する関数\r\n  const postSubmit = async (e) => {\r\n    e.preventDefault(); // フォームのデフォルト送信を防止\r\n\r\n    // 新規投稿データ\r\n    const newPost = {\r\n      postDate: new Date().toISOString(),\r\n      title,\r\n      content,\r\n    };\r\n\r\n    try {\r\n      // postsプロパティに追加するデータを新規作成（既存postsデータ＋新規投稿データ）\r\n      const updatedPosts = [...authUserBlog, newPost];\r\n      console.log(updatedPosts);\r\n\r\n      // postsプロパティに新規データを追加\r\n      await axios.put(`${ENDPOINT_BLOG}/${userState.id}`, {\r\n        posts: updatedPosts,\r\n      });\r\n\r\n      dispatch(addPostsActions(updatedPosts));\r\n    } catch (e) {\r\n      console.error('Error adding new post:', e);\r\n    }\r\n\r\n    // try {\r\n    //   // まず、ユーザのブログの既存データを取得\r\n    //   const res = await axios.get(`${ENDPOINT_BLOG}?id=${userState.id}`);\r\n    //   const blogData = res.data[0];\r\n\r\n    //   console.log(authUserBlog); // posts全体のデータ（配列）\r\n    //   console.log(blogData); // 合致するidが含まれているpostsオブジェクト\r\n\r\n    //   // posts配列に新しいポストを追加\r\n    //   const updatedPosts = [...blogData.posts, newPost];\r\n\r\n    //   // オブジェクト全体を更新する\r\n    //   await axios.put(`${ENDPOINT_BLOG}/${userState.id}`, {\r\n    //     ...blogData,\r\n    //     posts: updatedPosts,\r\n    //   });\r\n\r\n    //   // const res = await axios.post(\r\n    //   //   `${ENDPOINT_BLOG}/keyId=${userState.id}/posts`,\r\n    //   //   newPost\r\n    //   // );\r\n    // } catch (e) {\r\n    //   console.error('Error adding new post:', e);\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={postSubmit} className=''>\r\n        <div className='new-post-title-area'>\r\n          <textarea\r\n            className={`new-post-title-textbox new-post-title-textbox-${titleErrorFlag}`}\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <p\r\n            className={`new-post-title-length new-post-title-length-${titleErrorFlag}`}\r\n          >{`${title.length}文字 / 30文字`}</p>\r\n        </div>\r\n        <div className='new-post-content-area'>\r\n          <textarea\r\n            className={`new-post-content-textbox new-post-content-textbox-${contentErrorFlag}`}\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n          />\r\n          <p\r\n            className={`new-post-content-length new-post-content-length-${contentErrorFlag}`}\r\n          >{`${content.length}文字 / 500文字`}</p>\r\n        </div>\r\n        <button\r\n          type='submit'\r\n          className={`submit-button submit-button-disabled-${disabledFlag} new-post-submit-button`}\r\n          disabled={disabledFlag}\r\n        >\r\n          投稿\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}