{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { TODO_ENDPOINT } from '../../consts/todoConsts';\nimport axios from 'axios';\nconst todoSlice = createSlice({\n  name: 'todo',\n  initialState: {\n    todoList: [],\n    status: null\n  },\n  reducers: {\n    addTodo(state, {\n      payload\n    }) {\n      // 渡ってきたデータをstateに追加\n      state.todoList.push(payload);\n    },\n    deleteTodo(state, {\n      payload\n    }) {\n      // 渡ってきたid以外のデータを残してstateを更新\n      const newTodo = state.todoList.filter(todo => {\n        return todo.id !== payload.id;\n      });\n      state.todoList = newTodo;\n    },\n    toggleEditing(state, {\n      payload\n    }) {\n      // 渡ってきたidと合致するデータのみeditingを反転させてstateを更新\n      const newState = state.todoList.map(todo => {\n        return todo.id === payload.id ? {\n          ...todo,\n          editing: !todo.editing\n        } : todo;\n      });\n      state.todoList = newState;\n    },\n    inputChange(state, {\n      payload\n    }) {\n      // 渡ってきたidと合致するデータのcontentに、渡ってきた入力値(payload.inputVal)を代入\n      const newState = state.todoList.map(todo => {\n        return todo.id === payload.id ? {\n          ...todo,\n          content: payload.inputVal\n        } : todo;\n      });\n      state.todoList = newState;\n    }\n  },\n  // 非同期型のアクションクリエーターがdispatchされたら処理を行う\n  extraReducers: builder => {\n    builder.addCase(fetchTodoData.pending, () => {});\n    builder.addCase(fetchTodoData.fulfilled, (state, actions) => {\n      console.log(actions);\n      state.todoList = actions.payload;\n    });\n    builder.addCase(fetchTodoData.rejected, () => {});\n  }\n});\n\n// createAsyncThunkで非同期型のアクションを生成\n// 第二引数はディスパッチされた際の非同期処理を記載。完了したらfulfilledへ\n// データを取得時にこのアクションがディスパッチされる必要があるためexport\nexport const fetchTodoData = createAsyncThunk('todo/asyncTodo', async () => {\n  const res = await axios.get(TODO_ENDPOINT);\n  return res.data;\n});\nexport const {\n  addTodo,\n  deleteTodo,\n  toggleEditing,\n  inputChange\n} = todoSlice.actions;\n\n// configureのreducerプロパティに渡すためexport\nexport default todoSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","TODO_ENDPOINT","axios","todoSlice","name","initialState","todoList","status","reducers","addTodo","state","payload","push","deleteTodo","newTodo","filter","todo","id","toggleEditing","newState","map","editing","inputChange","content","inputVal","extraReducers","builder","addCase","fetchTodoData","pending","fulfilled","actions","console","log","rejected","res","get","data","reducer"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_middleware/store/modules/todo.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { TODO_ENDPOINT } from '../../consts/todoConsts';\r\nimport axios from 'axios';\r\n\r\nconst todoSlice = createSlice({\r\n  name: 'todo',\r\n  initialState: {\r\n    todoList: [],\r\n    status: null,\r\n  },\r\n  reducers: {\r\n    addTodo(state, { payload }) {\r\n      // 渡ってきたデータをstateに追加\r\n      state.todoList.push(payload);\r\n    },\r\n\r\n    deleteTodo(state, { payload }) {\r\n      // 渡ってきたid以外のデータを残してstateを更新\r\n      const newTodo = state.todoList.filter((todo) => {\r\n        return todo.id !== payload.id;\r\n      });\r\n      state.todoList = newTodo;\r\n    },\r\n\r\n    toggleEditing(state, { payload }) {\r\n      // 渡ってきたidと合致するデータのみeditingを反転させてstateを更新\r\n      const newState = state.todoList.map((todo) => {\r\n        return todo.id === payload.id\r\n          ? { ...todo, editing: !todo.editing }\r\n          : todo;\r\n      });\r\n      state.todoList = newState;\r\n    },\r\n\r\n    inputChange(state, { payload }) {\r\n      // 渡ってきたidと合致するデータのcontentに、渡ってきた入力値(payload.inputVal)を代入\r\n      const newState = state.todoList.map((todo) => {\r\n        return todo.id === payload.id\r\n          ? { ...todo, content: payload.inputVal }\r\n          : todo;\r\n      });\r\n      state.todoList = newState;\r\n    },\r\n  },\r\n\r\n  // 非同期型のアクションクリエーターがdispatchされたら処理を行う\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchTodoData.pending, () => {});\r\n    builder.addCase(fetchTodoData.fulfilled, (state, actions) => {\r\n      console.log(actions);\r\n      state.todoList = actions.payload;\r\n    });\r\n    builder.addCase(fetchTodoData.rejected, () => {});\r\n  },\r\n});\r\n\r\n// createAsyncThunkで非同期型のアクションを生成\r\n// 第二引数はディスパッチされた際の非同期処理を記載。完了したらfulfilledへ\r\n// データを取得時にこのアクションがディスパッチされる必要があるためexport\r\nexport const fetchTodoData = createAsyncThunk('todo/asyncTodo', async () => {\r\n  const res = await axios.get(TODO_ENDPOINT);\r\n  return res.data;\r\n});\r\n\r\nexport const { addTodo, deleteTodo, toggleEditing, inputChange } =\r\n  todoSlice.actions;\r\n\r\n// configureのreducerプロパティに渡すためexport\r\nexport default todoSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,aAAa,QAAQ,yBAAyB;AACvD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAE;MAC1B;MACAD,KAAK,CAACJ,QAAQ,CAACM,IAAI,CAACD,OAAO,CAAC;IAC9B,CAAC;IAEDE,UAAUA,CAACH,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAE;MAC7B;MACA,MAAMG,OAAO,GAAGJ,KAAK,CAACJ,QAAQ,CAACS,MAAM,CAAEC,IAAI,IAAK;QAC9C,OAAOA,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE;MAC/B,CAAC,CAAC;MACFP,KAAK,CAACJ,QAAQ,GAAGQ,OAAO;IAC1B,CAAC;IAEDI,aAAaA,CAACR,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAE;MAChC;MACA,MAAMQ,QAAQ,GAAGT,KAAK,CAACJ,QAAQ,CAACc,GAAG,CAAEJ,IAAI,IAAK;QAC5C,OAAOA,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,GACzB;UAAE,GAAGD,IAAI;UAAEK,OAAO,EAAE,CAACL,IAAI,CAACK;QAAQ,CAAC,GACnCL,IAAI;MACV,CAAC,CAAC;MACFN,KAAK,CAACJ,QAAQ,GAAGa,QAAQ;IAC3B,CAAC;IAEDG,WAAWA,CAACZ,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAE;MAC9B;MACA,MAAMQ,QAAQ,GAAGT,KAAK,CAACJ,QAAQ,CAACc,GAAG,CAAEJ,IAAI,IAAK;QAC5C,OAAOA,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,GACzB;UAAE,GAAGD,IAAI;UAAEO,OAAO,EAAEZ,OAAO,CAACa;QAAS,CAAC,GACtCR,IAAI;MACV,CAAC,CAAC;MACFN,KAAK,CAACJ,QAAQ,GAAGa,QAAQ;IAC3B;EACF,CAAC;EAED;EACAM,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACC,aAAa,CAACC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IAChDH,OAAO,CAACC,OAAO,CAACC,aAAa,CAACE,SAAS,EAAE,CAACpB,KAAK,EAAEqB,OAAO,KAAK;MAC3DC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;MACpBrB,KAAK,CAACJ,QAAQ,GAAGyB,OAAO,CAACpB,OAAO;IAClC,CAAC,CAAC;IACFe,OAAO,CAACC,OAAO,CAACC,aAAa,CAACM,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;EACnD;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,OAAO,MAAMN,aAAa,GAAG7B,gBAAgB,CAAC,gBAAgB,EAAE,YAAY;EAC1E,MAAMoC,GAAG,GAAG,MAAMjC,KAAK,CAACkC,GAAG,CAACnC,aAAa,CAAC;EAC1C,OAAOkC,GAAG,CAACE,IAAI;AACjB,CAAC,CAAC;AAEF,OAAO,MAAM;EAAE5B,OAAO;EAAEI,UAAU;EAAEK,aAAa;EAAEI;AAAY,CAAC,GAC9DnB,SAAS,CAAC4B,OAAO;;AAEnB;AACA,eAAe5B,SAAS,CAACmC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}