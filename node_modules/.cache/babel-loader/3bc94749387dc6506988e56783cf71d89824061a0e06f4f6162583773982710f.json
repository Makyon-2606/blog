{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sjamp\\\\Documents\\\\\\u5B66\\u7FD2\\\\react-guide-material\\\\13_redux\\\\start\\\\src\\\\070_blog\\\\components\\\\SignUpPass.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport { UPPERCASE_REGEX, LOWERCASE_REGEX, DIGIT_REGEX, SPECIAL_CHAR_REGEX, PASSWORD_CRITERIA_ERROR_MESSAGE } from '../consts/const';\nimport ErrorMessage from './ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SignUpPass = ({\n  passState,\n  passErrorFlag\n}) => {\n  _s();\n  const [pass, setPass] = passState; // 入力値の状態管理（props）\n  const [errorFlag, setErrorFlag] = passErrorFlag; // エラーフラグ_更新関数のみ（props）\n  const [isFirstInputPass, setIsFirstInputPass] = useState(false); // 初期入力フラグ\n\n  // パスワードのバリデーション状態を一つのオブジェクトで管理\n  const [validation, setValidation] = useState({\n    isLengthValid: false,\n    hasUppercase: false,\n    hasLowercase: false,\n    hasDegit: false,\n    hasSpecialChar: false\n  });\n  const validatePassword = useCallback(() => {\n    const newValidation = {\n      isLengthValid: String(pass).length >= 10,\n      hasUppercase: UPPERCASE_REGEX.test(pass),\n      hasLowercase: pass ? LOWERCASE_REGEX.test(pass) : false,\n      hasDegit: DIGIT_REGEX.test(pass),\n      hasSpecialChar: SPECIAL_CHAR_REGEX.test(pass)\n    };\n    setValidation(newValidation); // 一度の更新で全てのバリデーション状態を設定\n\n    const isCriteriaMet = Object.values(newValidation).every(Boolean);\n    setErrorFlag(isCriteriaMet); // 全ての条件を満たしているかのフラグを設定\n  }, [pass]);\n  // const [isLengthValid, setIsLengthValid] = useState(false); // 10文字以上入力されているか状態管理\n  // const [hasUppercase, setHasUppercase] = useState(false); // 大文字が含まれているか状態管理\n  // const [hasLowercase, setHasLowercase] = useState(false); // 小文字が含まれているか状態管理\n  // const [hasDegit, setDegit] = useState(false); // 数字が含まれているか状態管理\n  // const [hasSpecialChar, setHasSpecialChar] = useState(false); // 記号が含まれているか状態管理\n  // // const [isPasswordCriteriaMet, setIsPasswordCriteriaMet] = useState(false); // すべての入力条件を満たしているか状態管理\n\n  // // パスワードのバリデーションチェックを行う関数\n  // const validatePassword = useCallback(() => {\n  //   const isLengthValid = String(pass).length >= 10;\n  //   setIsLengthValid(isLengthValid); // 10文字以上入力されているか\n\n  //   const isUppercase = UPPERCASE_REGEX.test(pass); // 大文字が含まれているか\n  //   setHasUppercase(isUppercase);\n\n  //   const isLowercase = pass ? LOWERCASE_REGEX.test(pass) : false; // 小文字が含まれているか。nullを直接正規表現のtestメソッドに渡すと、nullが文字列\"null\"に変換され、その結果としてテストが実行される防止\n  //   setHasLowercase(isLowercase);\n\n  //   const isDigit = DIGIT_REGEX.test(pass); // 数値が含まれているか\n  //   setDegit(isDigit);\n\n  //   const isSpecialChar = SPECIAL_CHAR_REGEX.test(pass); // 記号が含まれているか\n  //   setHasSpecialChar(isSpecialChar);\n\n  //   const isCriteriaMet =\n  //     isLengthValid && isUppercase && isLowercase && isDigit && isSpecialChar; // 上記すべての条件を満たしているか\n  //   // setIsPasswordCriteriaMet(isCriteriaMet);\n  //   setErrorFlag(isCriteriaMet); //\n  // }, [pass]);\n\n  // パスワードの入力条件を満たしているか確認\n  useEffect(() => {\n    validatePassword();\n  }, [pass]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\",\n      value: pass,\n      onChange: e => {\n        setPass(e.target.value);\n      },\n      onBlur: () => setIsFirstInputPass(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), isFirstInputPass && !errorFlag && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: PASSWORD_CRITERIA_ERROR_MESSAGE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: `lengthValid-${isLengthValid}`,\n        children: \"10\\u6587\\u5B57\\u4EE5\\u4E0A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `uppercase-${hasUppercase}`,\n        children: \"\\u534A\\u89D2\\u5927\\u6587\\u5B57\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `lowercase-${hasLowercase}`,\n        children: \"\\u534A\\u89D2\\u5C0F\\u6587\\u5B57\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `degit-${hasDegit}`,\n        children: \"\\u534A\\u89D2\\u6570\\u5024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `special-char-${hasSpecialChar}`,\n        children: \"\\u534A\\u89D2\\u8A18\\u53F7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(SignUpPass, \"J1yAbYchklGGckNSV+Qe0Ukt/+M=\");\n_c = SignUpPass;\nexport default SignUpPass;\nvar _c;\n$RefreshReg$(_c, \"SignUpPass\");","map":{"version":3,"names":["useCallback","useEffect","useState","UPPERCASE_REGEX","LOWERCASE_REGEX","DIGIT_REGEX","SPECIAL_CHAR_REGEX","PASSWORD_CRITERIA_ERROR_MESSAGE","ErrorMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","SignUpPass","passState","passErrorFlag","_s","pass","setPass","errorFlag","setErrorFlag","isFirstInputPass","setIsFirstInputPass","validation","setValidation","isLengthValid","hasUppercase","hasLowercase","hasDegit","hasSpecialChar","validatePassword","newValidation","String","length","test","isCriteriaMet","Object","values","every","Boolean","children","type","placeholder","value","onChange","e","target","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","message","className","_c","$RefreshReg$"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/components/SignUpPass.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\r\nimport {\r\n  UPPERCASE_REGEX,\r\n  LOWERCASE_REGEX,\r\n  DIGIT_REGEX,\r\n  SPECIAL_CHAR_REGEX,\r\n  PASSWORD_CRITERIA_ERROR_MESSAGE,\r\n} from '../consts/const';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst SignUpPass = ({ passState, passErrorFlag }) => {\r\n  const [pass, setPass] = passState; // 入力値の状態管理（props）\r\n  const [errorFlag, setErrorFlag] = passErrorFlag; // エラーフラグ_更新関数のみ（props）\r\n  const [isFirstInputPass, setIsFirstInputPass] = useState(false); // 初期入力フラグ\r\n\r\n  // パスワードのバリデーション状態を一つのオブジェクトで管理\r\n  const [validation, setValidation] = useState({\r\n    isLengthValid: false,\r\n    hasUppercase: false,\r\n    hasLowercase: false,\r\n    hasDegit: false,\r\n    hasSpecialChar: false,\r\n  });\r\n\r\n  const validatePassword = useCallback(() => {\r\n    const newValidation = {\r\n      isLengthValid: String(pass).length >= 10,\r\n      hasUppercase: UPPERCASE_REGEX.test(pass),\r\n      hasLowercase: pass ? LOWERCASE_REGEX.test(pass) : false,\r\n      hasDegit: DIGIT_REGEX.test(pass),\r\n      hasSpecialChar: SPECIAL_CHAR_REGEX.test(pass),\r\n    };\r\n\r\n    setValidation(newValidation); // 一度の更新で全てのバリデーション状態を設定\r\n\r\n    const isCriteriaMet = Object.values(newValidation).every(Boolean);\r\n    setErrorFlag(isCriteriaMet); // 全ての条件を満たしているかのフラグを設定\r\n  }, [pass]);\r\n  // const [isLengthValid, setIsLengthValid] = useState(false); // 10文字以上入力されているか状態管理\r\n  // const [hasUppercase, setHasUppercase] = useState(false); // 大文字が含まれているか状態管理\r\n  // const [hasLowercase, setHasLowercase] = useState(false); // 小文字が含まれているか状態管理\r\n  // const [hasDegit, setDegit] = useState(false); // 数字が含まれているか状態管理\r\n  // const [hasSpecialChar, setHasSpecialChar] = useState(false); // 記号が含まれているか状態管理\r\n  // // const [isPasswordCriteriaMet, setIsPasswordCriteriaMet] = useState(false); // すべての入力条件を満たしているか状態管理\r\n\r\n  // // パスワードのバリデーションチェックを行う関数\r\n  // const validatePassword = useCallback(() => {\r\n  //   const isLengthValid = String(pass).length >= 10;\r\n  //   setIsLengthValid(isLengthValid); // 10文字以上入力されているか\r\n\r\n  //   const isUppercase = UPPERCASE_REGEX.test(pass); // 大文字が含まれているか\r\n  //   setHasUppercase(isUppercase);\r\n\r\n  //   const isLowercase = pass ? LOWERCASE_REGEX.test(pass) : false; // 小文字が含まれているか。nullを直接正規表現のtestメソッドに渡すと、nullが文字列\"null\"に変換され、その結果としてテストが実行される防止\r\n  //   setHasLowercase(isLowercase);\r\n\r\n  //   const isDigit = DIGIT_REGEX.test(pass); // 数値が含まれているか\r\n  //   setDegit(isDigit);\r\n\r\n  //   const isSpecialChar = SPECIAL_CHAR_REGEX.test(pass); // 記号が含まれているか\r\n  //   setHasSpecialChar(isSpecialChar);\r\n\r\n  //   const isCriteriaMet =\r\n  //     isLengthValid && isUppercase && isLowercase && isDigit && isSpecialChar; // 上記すべての条件を満たしているか\r\n  //   // setIsPasswordCriteriaMet(isCriteriaMet);\r\n  //   setErrorFlag(isCriteriaMet); //\r\n  // }, [pass]);\r\n\r\n  // パスワードの入力条件を満たしているか確認\r\n  useEffect(() => {\r\n    validatePassword();\r\n  }, [pass]);\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='password'\r\n        placeholder='パスワード'\r\n        value={pass}\r\n        onChange={(e) => {\r\n          setPass(e.target.value);\r\n        }}\r\n        onBlur={() => setIsFirstInputPass(true)}\r\n      />\r\n      {isFirstInputPass && !errorFlag && (\r\n        <ErrorMessage message={PASSWORD_CRITERIA_ERROR_MESSAGE} />\r\n      )}\r\n      <ul className='list-container'>\r\n        <li className={`lengthValid-${isLengthValid}`}>10文字以上</li>\r\n        <li className={`uppercase-${hasUppercase}`}>半角大文字</li>\r\n        <li className={`lowercase-${hasLowercase}`}>半角小文字</li>\r\n        <li className={`degit-${hasDegit}`}>半角数値</li>\r\n        <li className={`special-char-${hasSpecialChar}`}>半角記号</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignUpPass;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}