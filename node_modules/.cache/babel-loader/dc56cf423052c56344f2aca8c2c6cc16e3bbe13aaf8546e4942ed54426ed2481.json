{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sjamp\\\\Documents\\\\\\u5B66\\u7FD2\\\\react-guide-material\\\\13_redux\\\\start\\\\src\\\\070_blog\\\\Mypage.js\",\n  _s = $RefreshSig$();\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { ENDPOINT_BLOG, FETCH_BLOG_DATA_FAILURE } from './consts/const';\nimport { addAuthUserBlog as addAuthUserProfileActions, allClear as allClearActions } from './store/modules/authUserState';\nimport BlogList from './components/BlogList';\nimport { persistor } from './store';\n\n/**\r\n * マイページ画面\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Mypage = () => {\n  _s();\n  const navigate = useNavigate();\n\n  /**\r\n   * ログインせずにマイページ画面への遷移を防止\r\n   *\r\n   * @param {object} authUserProfile ユーザ情報(store)\r\n   */\n  useEffect(() => {\n    if (!authUserProfile) {\n      navigate('/');\n    }\n  }, []);\n  const authUserProfile = useSelector(state => state.user.authUserProfile);\n  const authUserBlogPosts = useSelector(state => state.user.authUserBlog.posts);\n  const dispatch = useDispatch();\n\n  /**\r\n   * ユーザのブログ情報を取得する処理\r\n   *\r\n   * @param {object} authUserProfile ユーザ情報(store)\r\n   * @res 指定されたユーザIDを持つデータをAPIにリクエストしたレスポンスオブジェクト\r\n   * @authUserBlogData 指定されたユーザIDを持つデータをAPIにリクエストしたレスポンスデータ\r\n   * @addAuthUserProfileActions state.authUserProfileにデータを追加するアクションクリエーター\r\n   *\r\n   */\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await axios.get(`${ENDPOINT_BLOG}?id=${authUserProfile.id}`);\n        const authUserBlogData = res.data[0];\n        dispatch(addAuthUserProfileActions(authUserBlogData));\n      } catch (e) {\n        console.error(FETCH_BLOG_DATA_FAILURE, e);\n      }\n    })();\n  }, []);\n\n  /**\r\n   * マイページに関連するstateを削除し、トップ画面に遷移する関数\r\n   *\r\n   * @allClearActions state.authUserProfileおよびstate.authUserBlogを空にするアクションクリエーター\r\n   */\n  const logout = () => {\n    dispatch(allClearActions());\n    persistor.purge();\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [authUserProfile.name, \"\\u3055\\u3093\\u306E\\u30DA\\u30FC\\u30B8\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"newPost\",\n      className: \"button new-post-button\",\n      children: \"\\u65B0\\u898F\\u6295\\u7A3F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"changepass\",\n      className: \"button change-pass-button\",\n      children: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u5909\\u66F4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), authUserBlogPosts !== null && authUserBlogPosts !== void 0 && authUserBlogPosts.length ? authUserBlogPosts.map(post => /*#__PURE__*/_jsxDEV(BlogList, {\n      post: post\n    }, post.postDate, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-poslts-message\",\n      children: \"\\u6295\\u7A3F\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logout,\n      className: \"button logout-button\",\n      children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Mypage, \"NaI6bM9X8Edi7jmSSAR3TE6EXGA=\", false, function () {\n  return [useNavigate, useSelector, useSelector, useDispatch];\n});\n_c = Mypage;\nexport default Mypage;\nvar _c;\n$RefreshReg$(_c, \"Mypage\");","map":{"version":3,"names":["Link","useNavigate","useDispatch","useSelector","useEffect","axios","ENDPOINT_BLOG","FETCH_BLOG_DATA_FAILURE","addAuthUserBlog","addAuthUserProfileActions","allClear","allClearActions","BlogList","persistor","jsxDEV","_jsxDEV","Fragment","_Fragment","Mypage","_s","navigate","authUserProfile","state","user","authUserBlogPosts","authUserBlog","posts","dispatch","res","get","id","authUserBlogData","data","e","console","error","logout","purge","children","name","fileName","_jsxFileName","lineNumber","columnNumber","to","className","length","map","post","postDate","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/Mypage.js"],"sourcesContent":["import { Link, useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ENDPOINT_BLOG, FETCH_BLOG_DATA_FAILURE } from './consts/const';\r\nimport {\r\n  addAuthUserBlog as addAuthUserProfileActions,\r\n  allClear as allClearActions,\r\n} from './store/modules/authUserState';\r\nimport BlogList from './components/BlogList';\r\nimport { persistor } from './store';\r\n\r\n/**\r\n * マイページ画面\r\n */\r\nconst Mypage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  /**\r\n   * ログインせずにマイページ画面への遷移を防止\r\n   *\r\n   * @param {object} authUserProfile ユーザ情報(store)\r\n   */\r\n  useEffect(() => {\r\n    if (!authUserProfile) {\r\n      navigate('/');\r\n    }\r\n  }, []);\r\n\r\n  const authUserProfile = useSelector((state) => state.user.authUserProfile);\r\n  const authUserBlogPosts = useSelector(\r\n    (state) => state.user.authUserBlog.posts\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  /**\r\n   * ユーザのブログ情報を取得する処理\r\n   *\r\n   * @param {object} authUserProfile ユーザ情報(store)\r\n   * @res 指定されたユーザIDを持つデータをAPIにリクエストしたレスポンスオブジェクト\r\n   * @authUserBlogData 指定されたユーザIDを持つデータをAPIにリクエストしたレスポンスデータ\r\n   * @addAuthUserProfileActions state.authUserProfileにデータを追加するアクションクリエーター\r\n   *\r\n   */\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const res = await axios.get(\r\n          `${ENDPOINT_BLOG}?id=${authUserProfile.id}`\r\n        );\r\n        const authUserBlogData = res.data[0];\r\n        dispatch(addAuthUserProfileActions(authUserBlogData));\r\n      } catch (e) {\r\n        console.error(FETCH_BLOG_DATA_FAILURE, e);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  /**\r\n   * マイページに関連するstateを削除し、トップ画面に遷移する関数\r\n   *\r\n   * @allClearActions state.authUserProfileおよびstate.authUserBlogを空にするアクションクリエーター\r\n   */\r\n  const logout = () => {\r\n    dispatch(allClearActions());\r\n    persistor.purge();\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>{authUserProfile.name}さんのページ</h1>\r\n      <Link to='newPost' className='button new-post-button'>\r\n        新規投稿\r\n      </Link>\r\n      <Link to='changepass' className='button change-pass-button'>\r\n        パスワード変更\r\n      </Link>\r\n      {authUserBlogPosts?.length ? (\r\n        authUserBlogPosts.map((post) => (\r\n          <BlogList post={post} key={post.postDate} />\r\n        ))\r\n      ) : (\r\n        <div className='no-poslts-message'>投稿がありません</div>\r\n      )}\r\n      <button onClick={logout} className='button logout-button'>\r\n        ログアウト\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Mypage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}