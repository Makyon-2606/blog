{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport '../consts/const';\nimport ErrorMessage from './ErrorMessage';\nconst SignUpPass = ({\n  passState,\n  setPassErrorFlag\n}) => {\n  // const [pass, setPass] = passState; // 入力値の状態管理（props）\n  // const setErrorFlag = setPassErrorFlag; // エラーフラグ_更新関数のみ（props）\n  // const [isFirstInputPass, setIsFirstInputPass] = useState(false); // 初期入力フラグ\n  // const [errorMessage, setErrorMessage] = useState(null); // エラーメッセージの状態管理\n  // // パスワードのバリデーションチェックを行う関数\n  // const validatePassword = useCallback(() => {\n  //   const hasUppercase = /[A-Z]/; // 半角大文字\n  //   const hasLowercase = /[a-z]/; // 半角小文字\n  //   const hasDigit = /\\d/; //半角数値\n  //   const hasSpecialChar = /[-!\"#$%&'()*+,.\\/:;<=>?@\\[\\]^_`{|}~]/; //許容した記号\n  // }, [pass]);\n  // // 初期入力時のみ、バリデーションチェックを実行しない\n  // useEffect(() => {\n  //   if (isFirstInputPass) {\n  //     validatePassword();\n  //   }\n  // }, [isFirstInputPass, validatePassword]);\n  // return (\n  //   <>\n  //     <input\n  //       type='password'\n  //       placeholder='パスワード'\n  //       value={pass}\n  //       onChange={(e) => {\n  //         setPass(e.target.value);\n  //       }}\n  //       onBlur={setIsFirstInputPass(true)}\n  //     />\n  //     {errorMessage && (\n  //       <ErrorMessage message='下記すべての条件を含めたパスワードを設定してください' />\n  //     )}\n  //   </>\n  // );\n};\n_c = SignUpPass;\nexport default SignUpPass;\nvar _c;\n$RefreshReg$(_c, \"SignUpPass\");","map":{"version":3,"names":["useCallback","useEffect","useState","ErrorMessage","SignUpPass","passState","setPassErrorFlag","_c","$RefreshReg$"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/components/SignUpPass.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\r\nimport {} from '../consts/const';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst SignUpPass = ({ passState, setPassErrorFlag }) => {\r\n  // const [pass, setPass] = passState; // 入力値の状態管理（props）\r\n  // const setErrorFlag = setPassErrorFlag; // エラーフラグ_更新関数のみ（props）\r\n  // const [isFirstInputPass, setIsFirstInputPass] = useState(false); // 初期入力フラグ\r\n  // const [errorMessage, setErrorMessage] = useState(null); // エラーメッセージの状態管理\r\n  // // パスワードのバリデーションチェックを行う関数\r\n  // const validatePassword = useCallback(() => {\r\n  //   const hasUppercase = /[A-Z]/; // 半角大文字\r\n  //   const hasLowercase = /[a-z]/; // 半角小文字\r\n  //   const hasDigit = /\\d/; //半角数値\r\n  //   const hasSpecialChar = /[-!\"#$%&'()*+,.\\/:;<=>?@\\[\\]^_`{|}~]/; //許容した記号\r\n  // }, [pass]);\r\n  // // 初期入力時のみ、バリデーションチェックを実行しない\r\n  // useEffect(() => {\r\n  //   if (isFirstInputPass) {\r\n  //     validatePassword();\r\n  //   }\r\n  // }, [isFirstInputPass, validatePassword]);\r\n  // return (\r\n  //   <>\r\n  //     <input\r\n  //       type='password'\r\n  //       placeholder='パスワード'\r\n  //       value={pass}\r\n  //       onChange={(e) => {\r\n  //         setPass(e.target.value);\r\n  //       }}\r\n  //       onBlur={setIsFirstInputPass(true)}\r\n  //     />\r\n  //     {errorMessage && (\r\n  //       <ErrorMessage message='下記すべての条件を含めたパスワードを設定してください' />\r\n  //     )}\r\n  //   </>\r\n  // );\r\n};\r\n\r\nexport default SignUpPass;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,OAAe,iBAAiB;AAChC,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,UAAU,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAiB,CAAC,KAAK;EACtD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACD;AAACC,EAAA,GAlCIH,UAAU;AAoChB,eAAeA,UAAU;AAAC,IAAAG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}