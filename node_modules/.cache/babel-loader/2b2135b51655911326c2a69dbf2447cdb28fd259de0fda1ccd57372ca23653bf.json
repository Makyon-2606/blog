{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Reduxスライスを生成\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    authUserProfile: [],\n    authUserBlog: []\n  },\n  reducers: {\n    addAuthUserProfile(state, {\n      payload\n    }) {\n      state.authUserProfile = payload;\n    },\n    addAuthUserBlog(state, {\n      payload\n    }) {\n      console.log(state.authUserBlog);\n      state.authUserBlog = payload;\n    },\n    allClear(state) {\n      state.authUserProfile = [];\n      state.authUserBlog = [];\n    }\n  },\n  // ユーザプロフィール取得の非同期通信からstateに格納\n  extraReducers(builder) {\n    builder.addCase(userAsyncCreator.pending, () => {});\n    builder.addCase(userAsyncCreator.fulfilled, () => {});\n    builder.addCase(userAsyncCreator.rejected, () => {});\n  }\n});\n\n// 非同期アクションクリエーター生成\n// 第二引数は、非同期通信でユーザプロフィールを取得する処理\nexport const userAsyncCreator = createAsyncThunk('user/userProfile', async () => {});\nexport const {\n  addAuthUserProfile: addAuthUserData,\n  addAuthUserBlog,\n  allClear\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","userSlice","name","initialState","authUserProfile","authUserBlog","reducers","addAuthUserProfile","state","payload","addAuthUserBlog","console","log","allClear","extraReducers","builder","addCase","userAsyncCreator","pending","fulfilled","rejected","addAuthUserData","actions","reducer"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/store/modules/userState.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// Reduxスライスを生成\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: { authUserProfile: [], authUserBlog: [] },\r\n  reducers: {\r\n    addAuthUserProfile(state, { payload }) {\r\n      state.authUserProfile = payload;\r\n    },\r\n    addAuthUserBlog(state, { payload }) {\r\n      console.log(state.authUserBlog);\r\n      state.authUserBlog = payload;\r\n    },\r\n    allClear(state) {\r\n      state.authUserProfile = [];\r\n      state.authUserBlog = [];\r\n    },\r\n  },\r\n  // ユーザプロフィール取得の非同期通信からstateに格納\r\n  extraReducers(builder) {\r\n    builder.addCase(userAsyncCreator.pending, () => {});\r\n    builder.addCase(userAsyncCreator.fulfilled, () => {});\r\n    builder.addCase(userAsyncCreator.rejected, () => {});\r\n  },\r\n});\r\n\r\n// 非同期アクションクリエーター生成\r\n// 第二引数は、非同期通信でユーザプロフィールを取得する処理\r\nexport const userAsyncCreator = createAsyncThunk(\r\n  'user/userProfile',\r\n  async () => {}\r\n);\r\n\r\nexport const {\r\n  addAuthUserProfile: addAuthUserData,\r\n  addAuthUserBlog,\r\n  allClear,\r\n} = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC5BG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IAAEC,eAAe,EAAE,EAAE;IAAEC,YAAY,EAAE;EAAG,CAAC;EACvDC,QAAQ,EAAE;IACRC,kBAAkBA,CAACC,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAE;MACrCD,KAAK,CAACJ,eAAe,GAAGK,OAAO;IACjC,CAAC;IACDC,eAAeA,CAACF,KAAK,EAAE;MAAEC;IAAQ,CAAC,EAAE;MAClCE,OAAO,CAACC,GAAG,CAACJ,KAAK,CAACH,YAAY,CAAC;MAC/BG,KAAK,CAACH,YAAY,GAAGI,OAAO;IAC9B,CAAC;IACDI,QAAQA,CAACL,KAAK,EAAE;MACdA,KAAK,CAACJ,eAAe,GAAG,EAAE;MAC1BI,KAAK,CAACH,YAAY,GAAG,EAAE;IACzB;EACF,CAAC;EACD;EACAS,aAAaA,CAACC,OAAO,EAAE;IACrBA,OAAO,CAACC,OAAO,CAACC,gBAAgB,CAACC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IACnDH,OAAO,CAACC,OAAO,CAACC,gBAAgB,CAACE,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;IACrDJ,OAAO,CAACC,OAAO,CAACC,gBAAgB,CAACG,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;EACtD;AACF,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAMH,gBAAgB,GAAGjB,gBAAgB,CAC9C,kBAAkB,EAClB,YAAY,CAAC,CACf,CAAC;AAED,OAAO,MAAM;EACXO,kBAAkB,EAAEc,eAAe;EACnCX,eAAe;EACfG;AACF,CAAC,GAAGZ,SAAS,CAACqB,OAAO;AAErB,eAAerB,SAAS,CAACsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}