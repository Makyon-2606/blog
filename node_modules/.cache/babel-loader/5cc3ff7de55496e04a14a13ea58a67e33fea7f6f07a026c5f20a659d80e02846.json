{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sjamp\\\\Documents\\\\\\u5B66\\u7FD2\\\\react-guide-material\\\\13_redux\\\\start\\\\src\\\\070_blog\\\\components\\\\SignUpEmail.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect } from 'react';\nimport { GENERAL_TEXT_VALIDATION_PATTERN } from '../consts/const';\nimport ErrorMessage from './ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SignUpPass = ({\n  emailState,\n  firstInputEmail,\n  errorEmail\n}) => {\n  _s();\n  const [email, setEmail] = emailState;\n  const [isFirstInputEmail, setIsFirstInputEmail] = firstInputEmail;\n  const [isErrorEmail, setIsErrorEmail] = errorEmail;\n\n  // メールアドレスのバリデーションチェックを行う関数\n  const validateEmail = useCallback(() => {\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // メールアドレス形式の正規表現\n    const isEmailValid = !emailPattern.test(email); // メールアドレス形式ではないのか\n\n    setIsErrorEmail(isEmailValid); // バリデーション結果に応じて真偽値を代入\n  }, [email]);\n\n  // 初回入力中のみ、メールアドレスバリデーションを実行しない\n  useEffect(() => {\n    if (isFirstInputEmail) {\n      validateEmail();\n    }\n  }, [isFirstInputEmail, validateEmail]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\",\n      value: email,\n      onChange: e => {\n        setEmail(e.target.value);\n      },\n      onBlur: () => {\n        setIsFirstInputEmail(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), isErrorEmail && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: \"\\u6B63\\u3057\\u3044\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\\u3067\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(SignUpPass, \"cZzV7rx/wjDvI2GGo3qNlHSqyyU=\");\n_c = SignUpPass;\nexport default SignUpPass;\nvar _c;\n$RefreshReg$(_c, \"SignUpPass\");","map":{"version":3,"names":["useCallback","useEffect","GENERAL_TEXT_VALIDATION_PATTERN","ErrorMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","SignUpPass","emailState","firstInputEmail","errorEmail","_s","email","setEmail","isFirstInputEmail","setIsFirstInputEmail","isErrorEmail","setIsErrorEmail","validateEmail","emailPattern","isEmailValid","test","children","type","placeholder","value","onChange","e","target","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","message","_c","$RefreshReg$"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/components/SignUpEmail.js"],"sourcesContent":["import { useCallback, useEffect } from 'react';\r\nimport { GENERAL_TEXT_VALIDATION_PATTERN } from '../consts/const';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst SignUpPass = ({ emailState, firstInputEmail, errorEmail }) => {\r\n  const [email, setEmail] = emailState;\r\n  const [isFirstInputEmail, setIsFirstInputEmail] = firstInputEmail;\r\n  const [isErrorEmail, setIsErrorEmail] = errorEmail;\r\n\r\n  // メールアドレスのバリデーションチェックを行う関数\r\n  const validateEmail = useCallback(() => {\r\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // メールアドレス形式の正規表現\r\n    const isEmailValid = !emailPattern.test(email); // メールアドレス形式ではないのか\r\n\r\n    setIsErrorEmail(isEmailValid); // バリデーション結果に応じて真偽値を代入\r\n  }, [email]);\r\n\r\n  // 初回入力中のみ、メールアドレスバリデーションを実行しない\r\n  useEffect(() => {\r\n    if (isFirstInputEmail) {\r\n      validateEmail();\r\n    }\r\n  }, [isFirstInputEmail, validateEmail]);\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='email'\r\n        placeholder='メールアドレス'\r\n        value={email}\r\n        onChange={(e) => {\r\n          setEmail(e.target.value);\r\n        }}\r\n        onBlur={() => {\r\n          setIsFirstInputEmail(true);\r\n        }}\r\n      />\r\n      {isErrorEmail && (\r\n        <ErrorMessage message='正しいメールアドレスで入力してください' />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignUpPass;\r\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC9C,SAASC,+BAA+B,QAAQ,iBAAiB;AACjE,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,UAAU,GAAGA,CAAC;EAAEC,UAAU;EAAEC,eAAe;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,UAAU;EACpC,MAAM,CAACM,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGN,eAAe;EACjE,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGP,UAAU;;EAElD;EACA,MAAMQ,aAAa,GAAGnB,WAAW,CAAC,MAAM;IACtC,MAAMoB,YAAY,GAAG,4BAA4B,CAAC,CAAC;IACnD,MAAMC,YAAY,GAAG,CAACD,YAAY,CAACE,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC;;IAEhDK,eAAe,CAACG,YAAY,CAAC,CAAC,CAAC;EACjC,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC;;EAEX;EACAZ,SAAS,CAAC,MAAM;IACd,IAAIc,iBAAiB,EAAE;MACrBI,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACJ,iBAAiB,EAAEI,aAAa,CAAC,CAAC;EAEtC,oBACEd,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACElB,OAAA;MACEmB,IAAI,EAAC,OAAO;MACZC,WAAW,EAAC,4CAAS;MACrBC,KAAK,EAAEb,KAAM;MACbc,QAAQ,EAAGC,CAAC,IAAK;QACfd,QAAQ,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;MAC1B,CAAE;MACFI,MAAM,EAAEA,CAAA,KAAM;QACZd,oBAAoB,CAAC,IAAI,CAAC;MAC5B;IAAE;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EACDjB,YAAY,iBACXZ,OAAA,CAACF,YAAY;MAACgC,OAAO,EAAC;IAAqB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC9C;EAAA,eACD,CAAC;AAEP,CAAC;AAACtB,EAAA,CAtCIJ,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AAwChB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}