{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sjamp\\\\Documents\\\\\\u5B66\\u7FD2\\\\react-guide-material\\\\13_redux\\\\start\\\\src\\\\070_blog\\\\components\\\\PassValidate.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport { UPPERCASE_REGEX, LOWERCASE_REGEX, DIGIT_REGEX, SPECIAL_CHAR_REGEX, PASSWORD_CRITERIA_ERROR_MESSAGE } from '../consts/const';\nimport ErrorMessage from './ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PassValidate = ({\n  passState,\n  passErrorFlag\n}) => {\n  _s();\n  console.log(passState);\n  const [pass, setPass] = passState; // 入力値の状態管理（props）\n  const [errorFlag, setErrorFlag] = passErrorFlag; // エラーフラグ（props）\n  const [isFirstInputPass, setIsFirstInputPass] = useState(false); // 初期入力フラグ\n\n  // パスワードのバリデーション状態管理\n  const [validation, setValidation] = useState({\n    isLengthValid: false,\n    // 10文字以上\n    hasUppercase: false,\n    // 大文字\n    hasLowercase: false,\n    // 小文字\n    hasDegit: false,\n    // 数字\n    hasSpecialChar: false // 記号\n  });\n\n  // パスワード入力値のバリデーションチェックを行う関数\n  const validatePassword = useCallback(() => {\n    const newValidation = {\n      isLengthValid: String(pass).length >= 10,\n      hasUppercase: UPPERCASE_REGEX.test(pass),\n      hasLowercase: pass ? LOWERCASE_REGEX.test(pass) : false,\n      hasDegit: DIGIT_REGEX.test(pass),\n      hasSpecialChar: SPECIAL_CHAR_REGEX.test(pass)\n    };\n    setValidation(newValidation); // 各入力条件の結果を更新\n\n    const isPasswordFullyValidated = Object.values(newValidation).every(Boolean); // パスワード入力条件をすべて満たしているかの真偽値\n    setErrorFlag(!isPasswordFullyValidated); // すべて満たしていたらエラーフラグをfalse、そうでなかったらtrue\n  }, [pass]);\n\n  // パスワードが更新されたとき、バリデーションチェック関数を呼び出す\n  useEffect(() => {\n    validatePassword();\n  }, [pass]);\n  const a = 'あ';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: a,\n      value: pass,\n      onChange: e => {\n        setPass(e.target.value);\n      },\n      onBlur: () => setIsFirstInputPass(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), isFirstInputPass && errorFlag && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: PASSWORD_CRITERIA_ERROR_MESSAGE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(PassValidate, \"3ClFB5E2fu1wDx/R7XIM1JhDXQE=\");\n_c = PassValidate;\nexport default PassValidate;\nvar _c;\n$RefreshReg$(_c, \"PassValidate\");","map":{"version":3,"names":["useCallback","useEffect","useState","UPPERCASE_REGEX","LOWERCASE_REGEX","DIGIT_REGEX","SPECIAL_CHAR_REGEX","PASSWORD_CRITERIA_ERROR_MESSAGE","ErrorMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","PassValidate","passState","passErrorFlag","_s","console","log","pass","setPass","errorFlag","setErrorFlag","isFirstInputPass","setIsFirstInputPass","validation","setValidation","isLengthValid","hasUppercase","hasLowercase","hasDegit","hasSpecialChar","validatePassword","newValidation","String","length","test","isPasswordFullyValidated","Object","values","every","Boolean","a","children","type","placeholder","value","onChange","e","target","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","message","_c","$RefreshReg$"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/components/PassValidate.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\r\nimport {\r\n  UPPERCASE_REGEX,\r\n  LOWERCASE_REGEX,\r\n  DIGIT_REGEX,\r\n  SPECIAL_CHAR_REGEX,\r\n  PASSWORD_CRITERIA_ERROR_MESSAGE,\r\n} from '../consts/const';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst PassValidate = ({ passState, passErrorFlag }) => {\r\n  console.log(passState);\r\n  const [pass, setPass] = passState; // 入力値の状態管理（props）\r\n  const [errorFlag, setErrorFlag] = passErrorFlag; // エラーフラグ（props）\r\n  const [isFirstInputPass, setIsFirstInputPass] = useState(false); // 初期入力フラグ\r\n\r\n  // パスワードのバリデーション状態管理\r\n  const [validation, setValidation] = useState({\r\n    isLengthValid: false, // 10文字以上\r\n    hasUppercase: false, // 大文字\r\n    hasLowercase: false, // 小文字\r\n    hasDegit: false, // 数字\r\n    hasSpecialChar: false, // 記号\r\n  });\r\n\r\n  // パスワード入力値のバリデーションチェックを行う関数\r\n  const validatePassword = useCallback(() => {\r\n    const newValidation = {\r\n      isLengthValid: String(pass).length >= 10,\r\n      hasUppercase: UPPERCASE_REGEX.test(pass),\r\n      hasLowercase: pass ? LOWERCASE_REGEX.test(pass) : false,\r\n      hasDegit: DIGIT_REGEX.test(pass),\r\n      hasSpecialChar: SPECIAL_CHAR_REGEX.test(pass),\r\n    };\r\n    setValidation(newValidation); // 各入力条件の結果を更新\r\n\r\n    const isPasswordFullyValidated =\r\n      Object.values(newValidation).every(Boolean); // パスワード入力条件をすべて満たしているかの真偽値\r\n    setErrorFlag(!isPasswordFullyValidated); // すべて満たしていたらエラーフラグをfalse、そうでなかったらtrue\r\n  }, [pass]);\r\n\r\n  // パスワードが更新されたとき、バリデーションチェック関数を呼び出す\r\n  useEffect(() => {\r\n    validatePassword();\r\n  }, [pass]);\r\n\r\n  const a = 'あ';\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='password'\r\n        placeholder={a}\r\n        value={pass}\r\n        onChange={(e) => {\r\n          setPass(e.target.value);\r\n        }}\r\n        onBlur={() => setIsFirstInputPass(true)}\r\n      />\r\n      {isFirstInputPass && errorFlag && (\r\n        <ErrorMessage message={PASSWORD_CRITERIA_ERROR_MESSAGE} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PassValidate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}