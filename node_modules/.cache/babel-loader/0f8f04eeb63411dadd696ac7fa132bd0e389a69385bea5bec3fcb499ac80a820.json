{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport ErrorMessage from './ErrorMessage';\nimport { EMAIL_INVALID, EMAIL_VALIDATION_PATTERN } from '../consts/const';\nconst SignUpEmail = ({\n  emailState,\n  setEmailErrorFlag\n}) => {\n  // const [email, setEmail] = emailState; // 入力値の状態管理（props）\n  // const setErrorFlag = setEmailErrorFlag; // エラーフラグ_更新関数のみ（props）\n  // const [isFirstInputEmail, setIsFirstInputEmail] = useState(false); // 初期入力フラグ\n  // const [errorMessage, setErrorMessage] = useState(null); // エラーメッセージの状態管理\n  // // メールアドレスのバリデーションチェックを行う関数\n  // const validateEmail = useCallback(() => {\n  //   const isEmailValid = EMAIL_VALIDATION_PATTERN.test(email); // メールアドレス形式が正しいか\n  //   isEmailValid ? setErrorMessage(null) : setErrorMessage(EMAIL_INVALID); // 正しかったらエラーメッセージに何も代入せず、正しくなかったらエラーメッセージを代入\n  //   setErrorFlag(!!errorMessage); // errorMessageがfalsyな値だったらfalse、truthyな値だったらtrue\n  // }, [email]);\n  // // 初期入力時のみ、バリデーションチェックを実行しない\n  // useEffect(() => {\n  //   if (isFirstInputEmail) {\n  //     validateEmail();\n  //   }\n  // }, [isFirstInputEmail, validateEmail]);\n  // return (\n  //   <>\n  //     <input\n  //       type='email'\n  //       placeholder='メールアドレス'\n  //       value={email}\n  //       onChange={(e) => {\n  //         setEmail(e.target.value);\n  //       }}\n  //       onBlur={() => {\n  //         setIsFirstInputEmail(true);\n  //       }}\n  //     />\n  //     {errorMessage && <ErrorMessage message={errorMessage} />}\n  //   </>\n  // );\n};\n_c = SignUpEmail;\nexport default SignUpEmail;\nvar _c;\n$RefreshReg$(_c, \"SignUpEmail\");","map":{"version":3,"names":["useCallback","useEffect","useState","ErrorMessage","EMAIL_INVALID","EMAIL_VALIDATION_PATTERN","SignUpEmail","emailState","setEmailErrorFlag","_c","$RefreshReg$"],"sources":["C:/Users/sjamp/Documents/学習/react-guide-material/13_redux/start/src/070_blog/components/SignUpEmail.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport { EMAIL_INVALID, EMAIL_VALIDATION_PATTERN } from '../consts/const';\r\n\r\nconst SignUpEmail = ({ emailState, setEmailErrorFlag }) => {\r\n  // const [email, setEmail] = emailState; // 入力値の状態管理（props）\r\n  // const setErrorFlag = setEmailErrorFlag; // エラーフラグ_更新関数のみ（props）\r\n  // const [isFirstInputEmail, setIsFirstInputEmail] = useState(false); // 初期入力フラグ\r\n  // const [errorMessage, setErrorMessage] = useState(null); // エラーメッセージの状態管理\r\n  // // メールアドレスのバリデーションチェックを行う関数\r\n  // const validateEmail = useCallback(() => {\r\n  //   const isEmailValid = EMAIL_VALIDATION_PATTERN.test(email); // メールアドレス形式が正しいか\r\n  //   isEmailValid ? setErrorMessage(null) : setErrorMessage(EMAIL_INVALID); // 正しかったらエラーメッセージに何も代入せず、正しくなかったらエラーメッセージを代入\r\n  //   setErrorFlag(!!errorMessage); // errorMessageがfalsyな値だったらfalse、truthyな値だったらtrue\r\n  // }, [email]);\r\n  // // 初期入力時のみ、バリデーションチェックを実行しない\r\n  // useEffect(() => {\r\n  //   if (isFirstInputEmail) {\r\n  //     validateEmail();\r\n  //   }\r\n  // }, [isFirstInputEmail, validateEmail]);\r\n  // return (\r\n  //   <>\r\n  //     <input\r\n  //       type='email'\r\n  //       placeholder='メールアドレス'\r\n  //       value={email}\r\n  //       onChange={(e) => {\r\n  //         setEmail(e.target.value);\r\n  //       }}\r\n  //       onBlur={() => {\r\n  //         setIsFirstInputEmail(true);\r\n  //       }}\r\n  //     />\r\n  //     {errorMessage && <ErrorMessage message={errorMessage} />}\r\n  //   </>\r\n  // );\r\n};\r\n\r\nexport default SignUpEmail;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,aAAa,EAAEC,wBAAwB,QAAQ,iBAAiB;AAEzE,MAAMC,WAAW,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAkB,CAAC,KAAK;EACzD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACD;AAACC,EAAA,GAjCIH,WAAW;AAmCjB,eAAeA,WAAW;AAAC,IAAAG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}